name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # Shared environment variables
  DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
  NEXTAUTH_SECRET: test_secret_key_for_ci
  NEXTAUTH_URL: http://localhost:3001
  CI: true
  
  # Prisma telemetry disabling (issue #21 requirements)
  SKIP_PRISMA_TELEMETRY: 1
  PRISMA_DISABLE_TELEMETRY: 1
  PRISMA_SKIP_POSTINSTALL_GENERATE: true
  PRISMA_QUERY_ENGINE_BINARY_CACHE_DIR: ./prisma-cache
  CHECKPOINT_DISABLE: 1
  CHECKPOINT_TELEMETRY: 0
  
  # Next.js telemetry disable
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Enhanced npm caching with multiple restore keys
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
            npm-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      # Cache Prisma binaries and client 
      - name: Cache Prisma binaries
        uses: actions/cache@v4
        with:
          path: |
            ./prisma-cache
            node_modules/.prisma
            node_modules/@prisma/client
          key: prisma-binaries-${{ runner.os }}-${{ hashFiles('prisma/schema.prisma') }}
          restore-keys: |
            prisma-binaries-${{ runner.os }}-

      - name: Generate Prisma client (offline)
        run: |
          export PRISMA_DISABLE_TELEMETRY=true
          export CHECKPOINT_DISABLE=1
          export CHECKPOINT_TELEMETRY=0
          npx prisma generate --no-engine
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Run database migrations
        run: npx prisma migrate deploy

      - name: Run ESLint
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit

      # Cache Next.js build for faster builds
      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.next/cache
          key: nextjs-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('{src,pages,components}/**/*.[jt]s?(x)', '**/*.css', '**/*.scss') }}
          restore-keys: |
            nextjs-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-
            nextjs-${{ runner.os }}-

      - name: Build application
        run: npm run build

      # Get Playwright version for cache key
      - name: Get Playwright version
        id: playwright-version
        run: |
          echo "version=$(node -p "require('./package.json').dependencies?.['@playwright/test'] || require('./package.json').devDependencies?.['@playwright/test'] || ''")" >> $GITHUB_OUTPUT

      # Cache only chromium browser (as per playwright.config.ts)
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: playwright-browsers-${{ runner.os }}-${{ steps.playwright-version.outputs.version }}
          restore-keys: |
            playwright-browsers-${{ runner.os }}-

      # Install only chromium (not all browsers) to save time and bandwidth
      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install chromium --with-deps

      # Install only system dependencies if cache hit (browsers already cached)
      - name: Install system dependencies for Playwright
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps chromium

      - name: Run E2E tests
        run: npm run test
        env:
          CI: true

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Reuse npm cache from test job
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
            npm-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, javascript

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3

